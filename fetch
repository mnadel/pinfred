#!/usr/bin/env python3

import re
import os
import sys
import json
import logging
import datetime
import urllib.request
from urllib.parse import urlparse
import xml.etree.ElementTree as ET

logger = logging.getLogger(__name__)
logging.basicConfig(
    stream=sys.stdout,
    format='[%(asctime)s] %(levelname)s * %(message)s',
    level=logging.DEBUG if os.getenv("DEBUG") else logging.ERROR)

DATE_FORMAT = "%a %b %m %Y %-I:%M %p"
if "DATE_FORMAT" in os.environ and os.environ["DATE_FORMAT"]:
    DATE_FORMAT = os.environ["DATE_FORMAT"]

REFRESH_URL = "pins://refresh"
if "REFRESH_URL" in os.environ and os.environ["REFRESH_URL"]:
    REFRESH_URL = os.environ["REFRESH_URL"]

REFRESH_ITEM = {
    "title": "Refresh Your Pins",
    "arg": REFRESH_URL,
    "match": "@debug refresh your pins fetch",
}

LAST_ITEM = {
    "title": "Last Refresh",
    "subtitle": datetime.datetime.now().strftime(DATE_FORMAT),
    "match": "@debug last refresh fetch",
    "valid": False
}

DEFAULT_ITEMS = [REFRESH_ITEM, LAST_ITEM]

if len(sys.argv) == 2 and sys.argv[1] == "--generate":
    REFRESH_ITEM["title"] = "Fetch Your Pins"
    # match on just about anything they type
    REFRESH_ITEM["match"] = "@debug fetch refresh a b c d e f g h i j k l m n o p q r s t u v w x y z"
    LAST_ITEM["subtitle"] = "Search 'fetch' to fetch your Pins"

    print(json.dumps({"items": DEFAULT_ITEMS}))

    sys.exit(0)

if "PINBOARD_TOKEN" not in os.environ or not os.environ["PINBOARD_TOKEN"]:
    logging.error("missing auth token")
    sys.exit(1)

token = os.environ["PINBOARD_TOKEN"]
url = f"https://api.pinboard.in/v1/posts/all?auth_token={token}"

try:
    with urllib.request.urlopen(url, timeout=10) as req:
        tree = ET.fromstring(req.read().decode("utf-8"))
except urllib.error.HTTPError as e:
    logging.error(f"error fetching code={e.code}, url={url}, msg={e.read()}")
    sys.exit(2)

items = DEFAULT_ITEMS

for elem in tree:
    node = elem.attrib

    logging.debug(f"node={node}")

    url = node["href"]
    title = node["description"]
    tags = [x for x in node["tag"].split(" ") if len(x.strip()) > 0]
    note = node["extended"]

    tag = " ".join([f"#{x}" for x in tags])
    subtitle = url if not tags else f"{tag} {url}"

    parts = urlparse(url)
    queryable_parts = f"{parts.netloc} {parts.path} {parts.params} {parts.query} {parts.fragment}"
    url_parts = " ".join(re.split("\\W", queryable_parts))

    items.append({
        "title": title,
        "subtitle": subtitle,
        "arg": url,
        "match": f"{url} {url_parts} {title} {tag} {note}"
    })

print(json.dumps({"items": items}))
