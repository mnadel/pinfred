#!/usr/bin/env python3

import os
import sys
import json
import datetime
import urllib.request
import xml.etree.ElementTree as ET

def log(msg):
    sys.stderr.write(msg)
    sys.stderr.write("\n")
    sys.stderr.flush()

DATE_FORMAT = "%a %b %m %Y %-I:%M %p"
REFRESH_URL = "pins://refresh"

if "REFRESH_URL" in os.environ and os.environ["REFRESH_URL"]:
    REFRESH_URL = os.environ["REFRESH_URL"]

if "DATE_FORMAT" in os.environ and os.environ["DATE_FORMAT"]:
    DATE_FORMAT = os.environ["DATE_FORMAT"]

if "PINBOARD_TOKEN" not in os.environ or not os.environ["PINBOARD_TOKEN"]:
    log("missing auth token")
    sys.exit(1)

token = os.environ["PINBOARD_TOKEN"]
url = f"https://api.pinboard.in/v1/posts/all?auth_token={token}"

try:
    with urllib.request.urlopen(url, timeout=10) as req:
        tree = ET.fromstring(req.read().decode("utf-8"))
except urllib.error.HTTPError as e:
    log(f"error fetching code={e.code}, url={url}, msg={e.read()}")
    sys.exit(2)

# these should (roughly) match fetch.json, which is used when we've yet to fetch the bookmarks
# these below are used when we have fetched at least once, but the user wants to refresh them
items = [{
    "title": "Refresh Your Pins",
    "arg": REFRESH_URL,
    "match": "@debug refresh your pins fetch",
}, {
    "title": "Last Refresh",
    "subtitle": datetime.datetime.now().strftime(DATE_FORMAT),
    "match": "@debug last refresh fetch",
    "valid": False
}]

for elem in tree:
    node = elem.attrib

    url = node["href"]
    title = node["description"]
    tags = node["tag"].split(" ")

    tag = " ".join([f"#{x}" for x in tags])
    subtitle = url if not tags else f"{tag} {url}"

    items.append({
        "title": title,
        "subtitle": subtitle,
        "arg": url,
        "match": f"{url} {title} {subtitle}"
    })

with open("bookmarks.json", "w") as f:
    f.write(json.dumps({"items":items}))
