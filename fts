#!/usr/bin/env python3

import os
import sys
import json
import sqlite3
import logging
import argparse
from os.path import basename
from signal import signal, SIGINT, SIGPIPE, SIG_DFL as IGNORE

signal(SIGINT, IGNORE)
signal(SIGPIPE, IGNORE)

DBNAME = "pins.sqlite3"

def v(h, k):
    return h[k] if k in h else None

# see https://sqlite.org/fts5.html
def ftsify(query):
    keywords = ["near", "and", "or", "not"]
    for kw in keywords:
        query = query.replace(kw, kw.upper())
    return query

def index(cur, stream):
    data = json.load(stream)
    items = [(v(x,"title"), v(x,"arg"), v(x,"subtitle"), v(x,"match")) for x in data["items"]]

    cur.executescript("""
        DROP TABLE IF EXISTS pins;

        CREATE VIRTUAL TABLE
        IF NOT EXISTS pins
        USING FTS5(title, url, note, keywords, tokenize="trigram");
    """)

    cur.executemany("""
        INSERT INTO pins(title, url, note, keywords)
        VALUES (?, ?, ?, ?)
    """, items)

def search(cur, query):
    param = ftsify(query)

    sql = f"""
        SELECT title, url, note, keywords
        FROM pins
        WHERE
            (title MATCH '{param}')
            OR (url MATCH '{param}')
            OR (note MATCH '{param}')
            OR (keywords MATCH '{param}')
        ORDER BY RANK
    """

    logging.debug("executing query: %s", sql)

    asitem = lambda r: {"title":r[0], "arg":r[1], "subtitle":r[2], "match":r[3]}
    return [asitem(row) for row in cur.execute(sql)]

logger = logging.getLogger(__name__)
logging.basicConfig(
    stream=sys.stdout,
    format='[%(asctime)s] %(levelname)s * %(message)s',
    level=logging.DEBUG if os.getenv("DEBUG") else logging.ERROR)

parser = argparse.ArgumentParser(prog=basename(sys.argv[0]), description="full text search for pins")
parser.add_argument("-i", "--index", default=False, action="store_true", help="create the index from stdin")
parser.add_argument("query", nargs="?")

args = parser.parse_args()

if args.index and args.query:
    parser.error("cannot index and search at the same time")
elif not args.index and not args.query:
    parser.error("query is required")

with sqlite3.connect(DBNAME) as con:
    cur = con.cursor()

    if args.index:
        index(cur, sys.stdin)
    else:
        con.executescript("""
        	PRAGMA query_only = on;
            PRAGMA synchronous = off;
            PRAGMA mmap_size = 250000000;
            PRAGMA temp_store = memory;
            PRAGMA journal_mode = off;
            PRAGMA cache_size = -25000;
        """)

        print(json.dumps({"items": search(cur, args.query)}))
