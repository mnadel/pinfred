#!/usr/bin/env python3

import os
import sys
import json
import sqlite3
import logging
import argparse
import multiprocessing
from os.path import basename, join
from signal import signal, SIGINT, SIGPIPE, SIG_DFL as IGNORE

signal(SIGINT, IGNORE)
signal(SIGPIPE, IGNORE)

class Cursor:
    def __init__(self, cache=".", write=False):
        self._db = join(cache, "pins.sqlite3")
        self._write = write

    def __enter__(self):
        self._con = sqlite3.connect(self._db)
        self._cur = self._con.cursor()

        self._cur.executescript(f"""
            PRAGMA threads = {max(1, multiprocessing.cpu_count() - 2)};
            PRAGMA mmap_size = {25 * 2**20};
            PRAGMA temp_store = memory;
            PRAGMA cache_size = -25000;
        """)

        if not self._write:
            self._cur.executescript("""
                PRAGMA query_only = on;
                PRAGMA synchronous = off;
                PRAGMA journal_mode = off;
            """)

        return self._cur

    def __exit__(self, _type, _value, _tb):
        if self._write:
            self._con.commit()
            self._con.executescript("""
                INSERT INTO pins(pins) VALUES('optimize');
                PRAGMA optimize;
            """)
        self._con.close()

def ftsify(sql):
    # fts case-insensitive keywords
    for tok in ["near (", "near(", " and ", " or ", " not "]:
        if tok in sql:
            sql = sql.replace(tok, tok.upper())
    return sql

def index(cur, stream):
    data = json.load(stream)
    v = lambda h, k: h[k] if k in h else None
    items = [(v(x,"title"), v(x,"arg"), v(x,"subtitle"), v(x,"match")) for x in data["items"]]

    cur.executescript("""
        DROP TABLE IF EXISTS pins;

        CREATE VIRTUAL TABLE
        IF NOT EXISTS pins
        USING FTS5(title, url, note, keywords, tokenize="trigram");
    """)

    cur.executemany("""
        INSERT INTO pins(title, url, note, keywords)
        VALUES (?, ?, ?, ?)
    """, items)

def search(cur, query):
    sql = """
        SELECT title, url, note, keywords
        FROM pins
        WHERE pins MATCH ?
        ORDER BY RANK
    """

    logging.debug("executing query: %s -> %s", query, sql)

    asitem = lambda r: {"title":r[0], "arg":r[1], "subtitle":r[2], "match":r[3]}
    rows = cur.execute(sql, (query,))
    return [asitem(row) for row in rows]

logger = logging.getLogger(__name__)
logging.basicConfig(
    stream=sys.stdout,
    format='[%(asctime)s] %(levelname)s * %(message)s',
    level=logging.DEBUG if os.getenv("DEBUG") else logging.ERROR)

parser = argparse.ArgumentParser(prog=basename(sys.argv[0]), description="full text search for pins")
parser.add_argument("-i", "--index", default=False, action="store_true", help="create the index")
parser.add_argument("-d", "--cache-dir", default=".", help="location of the cache directory")
parser.add_argument("query", nargs="?")

args = parser.parse_args()

if args.index and args.query:
    parser.error("cannot index and search at the same time")
elif not args.index and not args.query:
    parser.error("query is required")
elif args.index:
    with Cursor(cache=args.cache_dir, write=True) as cur:
        index(cur, sys.stdin)
elif args.query:
    with Cursor(cache=args.cache_dir) as cur:
        sql = ftsify(args.query)
        print(json.dumps({"items": search(cur, sql)}))
else:
    parser.error("invalid command")