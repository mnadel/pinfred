#!/usr/bin/env python3

import re
import os
import sys
import json
import sqlite3
import logging
import argparse
from os.path import basename
from signal import signal, SIGINT, SIGPIPE, SIG_DFL as IGNORE

signal(SIGINT, IGNORE)
signal(SIGPIPE, IGNORE)

DBNAME = "pins.sqlite3"

def v(h, k):
    return h[k] if k in h else None

def assert_valid_query(query):
    if any(c in ";" for c in query):
        print("invalid query")
        sys.exit(1)

def index(con, stream):
    data = json.load(stream)
    items = [(v(x,"title"), v(x,"arg"), v(x,"subtitle"), v(x,"match")) for x in data["items"]]

    cur = con.cursor()
    cur.execute("DROP TABLE IF EXISTS pins")
    cur.execute("""
        CREATE VIRTUAL TABLE
        IF NOT EXISTS pins
        USING FTS5(title, url, note, keywords)
    """)

    cur.executemany("""
        INSERT INTO pins(title, url, note, keywords)
        VALUES (?, ?, ?, ?)
    """, items)

    cur.close()

def exec_search(query):
    sql = f"""
        SELECT title, url, note, keywords
        FROM pins
        WHERE
            (title MATCH '{query}')
            OR (url MATCH '{query}')
            OR (note MATCH '{query}')
            OR (keywords MATCH '{query}')
        ORDER BY RANK
    """

    matches = []
    cur = con.cursor()
    rs = cur.execute(sql)

    for row in rs:
        matches.append({
            "title": row[0],
            "subtitle": row[2],
            "arg": row[1],
            "match": row[3]
        })

    return matches

logger = logging.getLogger(__name__)
logging.basicConfig(
    stream=sys.stdout,
    format='[%(asctime)s] %(levelname)s * %(message)s',
    level=logging.DEBUG if os.getenv("DEBUG") else logging.ERROR)

parser = argparse.ArgumentParser(prog=basename(sys.argv[0]), description="full text search for pins")
parser.add_argument("-i", "--index", default=False, action="store_true", help="create the index")
parser.add_argument("query", nargs="?")

args = parser.parse_args()

with sqlite3.connect(DBNAME) as con:
    if args.index:
        index(con, sys.stdin)
    else:
        query = " ".join(args.query)
        assert_valid_query(query)
        print(json.dumps({"items": exec_search(con, query)}))