#!/usr/bin/env python3

import re
import os
import sys
import json
import sqlite3
import logging
from signal import signal, SIGINT, SIG_DFL as IGNORE

def assert_valid_query(query):
    if any(c in ";" for c in query):
        print("invalid query")
        sys.exit(1)

signal(SIGINT, IGNORE)

logger = logging.getLogger(__name__)
logging.basicConfig(
    stream=sys.stdout,
    format='[%(asctime)s] %(levelname)s * %(message)s',
    level=logging.DEBUG if os.getenv("DEBUG") else logging.ERROR)

query = " ".join(sys.argv[1:])
assert_valid_query(query)

sql = f"""
    SELECT title, url, note, keywords
    FROM pins
    WHERE
        (title MATCH '{query}')
        OR (url MATCH '{query}')
        OR (note MATCH '{query}')
        OR (keywords MATCH '{query}')
    ORDER BY RANK
"""

matches = []

with sqlite3.connect("pins.sqlite3") as con:
    rs = con.cursor().execute(sql)

    for row in rs:
        matches.append({
            "title": row[0],
            "subtitle": row[2],
            "arg": row[1],
            "match": row[3]
        })

print(json.dumps({"items": matches}))